<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Js on MY LIFE</title>
    <link>https://yjhmelody.github.io/tags/js/</link>
    <description>Recent content in Js on MY LIFE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <lastBuildDate>Wed, 07 Feb 2018 14:27:31 +0000</lastBuildDate>
    
	<atom:link href="https://yjhmelody.github.io/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS函数式编程笔记2</title>
      <link>https://yjhmelody.github.io/blog/posts/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Wed, 07 Feb 2018 14:27:31 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B02/</guid>
      <description>JS函数式编程 笔记里面常常依赖一些库和之前的代码，而且可能存在理论上的代码和未实现的函数，阅读时，需要仔细。
下面部分经常的东西后面经常用到，我先导入。
const curry = require(&#39;lodash/curry&#39;) const _ = require(&#39;lodash&#39;) const fp = require(&#39;lodash/fp&#39;) const moment = require(&#39;moment&#39;) let compose = function(f, g){ return function(x){ return f(g(x)) } } let toUpperCase = function(str){ return str.toUpperCase() } let toLowerCase = function(str){ return str.toLowerCase() }  Hindley-Milner 类型签名 初识类型 刚接触函数式编程的人很容易深陷类型签名（type signatures）的泥淖。类型（type）是让所有不同背景的人都能高效沟通的元语言。很大程度上，类型签名是以 “Hindley-Milner” 系统写就的。
类型签名在写纯函数时所起的作用非常大，大到英语都不能望其项背。这些签名轻轻诉说着函数最不可告人的秘密。短短一行，就能暴露函数的行为和目的。类型签名还衍生出了 “自由定理（free theorems）” 的概念。因为类型是可以推断的，所以明确的类型签名并不是必要的；不过你完全可以写精确度很高的类型签名，也可以让它们保持通用、抽象。类型签名不但可以用于编译时检测（compile timechecks），还是最好的文档。所以类型签名在函数式编程中扮演着非常重要的角色——重要程度远远超出你的想象。
// capitalize :: String -&amp;gt; String let capitalize = function(s){ return toUpperCase(head(s)) + toLowerCase(tail(s)) } console.</description>
    </item>
    
    <item>
      <title>JS函数式编程笔记1</title>
      <link>https://yjhmelody.github.io/blog/posts/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Mon, 11 Dec 2017 21:47:31 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B01/</guid>
      <description>JS函数式编程 我们在做什么  “we both know what happens when you assume”，源自一句名言“When you assume you make an ASS of U and ME”，意思是“让两人都难堪”）。但我猜想你在使用可变状态（mutable state）、无限制副作用（unrestricted side effects）和无原则设计（unprincipled design）的过程中已经遇到过一些麻烦。
 现在已经有一些通用的编程原则了，各种缩写词带领我们在编程的黑暗隧道里前行：DRY（不要重复自己，don&amp;rsquo;t repeat yourself），高内聚低耦合（loosecoupling high cohesion），YAGNI （你不会用到它的，ya ain&amp;rsquo;t gonna need it），最小意外原则（Principle of least surprise），单一责任（single responsibility）等等。这些原则同样适用于函数式编程(FP)。
先看基本的例子
let add = function (x, y) { return x + y }; let multiply = function (x, y) { return x * y }; let a = 4; let b = 2; let c = 0; let result = add(multiply(b, add(a, c)), multiply(a, b)); //=&amp;gt;16  你会发现我们不过是在运用古人早已获得的知识</description>
    </item>
    
  </channel>
</rss>