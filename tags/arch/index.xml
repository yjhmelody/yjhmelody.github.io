<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arch on Minimal</title>
    <link>/tags/arch/</link>
    <description>Recent content in Arch on Minimal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Sep 2017 19:48:52 +0000</lastBuildDate>
    
	<atom:link href="/tags/arch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>计算机系统结构</title>
      <link>/blog/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/</link>
      <pubDate>Thu, 28 Sep 2017 19:48:52 +0000</pubDate>
      
      <guid>/blog/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/</guid>
      <description>系统结构的部分课后作业，因为需要写成电子版，故稍微整理下也放入到博客中，方便你我他。答案是自己组织的，不保证一定正确。 书是张晨曦的《计算机系统结构（第2版）》
第一章 1 翻译技术是先把 L+1 级程序全部变换成 L 级程序后，再去执行新产生的 L 级程序，在执行过程中 L+1 级程序不再被访问。
解释技术是每当一条 L+1 级指令被译码后，就直接去执行一串等效的 L 级指令，然后再去取下一条 L+1 级指令，以此重复进行。
计算机系统结构是程序员所看到的计算机属性，即概念性结构与功能特性。
Amdahl定律：加快某部件执行速度所能获得的系统性能加速比，受限于该部件的执行时间占系统中总执行时间的百分比。
程序的局部性原理是指程序执行时所访问的存储器地址不是随机的，而是相对簇聚。局部性原理又表现为：时间局部性和空间局部性。 时间局部性是指如果程序中的某条指令一旦执行，则不久之后该指令可能再次被执行；如果某数据被访问，则不久之后该数据可能再次被访问。 空间局部性是指一旦程序访问了某个存储单元，则不久之后。其附近的存储单元也将被访问。
CPI(Cycles Per Instruction，每天指令的周期数) CPI = 执行程序所需要的时钟时间 / 执行指令个数。
模拟是指用软件的方法在一台现有的计算机（宿主机host）上实现另一台计算机（虚拟机VM）的指令集。
仿真是指用一台计算机（宿主机host）上的微程序去解释实现另一台计算机（目标机）的指令集。
3 Flynn分类法是按照指令流和数据流的多倍性进行分类的。
Flynn分类法把计算机系统结构分为以下4类：
 单指令流单数据流（SISD） 单指令流多数据流（SIMD） 多指令流单数据流（MISD） 多指令流多数据流（MIMD）  4 计算机系统设计经常使用的4个定量原理
 以经常性事件为重点，按照对经常性情况采用优化方法的原则，能得到更多整体上的改进。 Amdahl定律，加快某部件执行速度所能获得的系统性能加速比，受限于该部件的执行时间占系统中总执行时间的百分比。 CPU性能公式，CPU时间 = 时钟周期时间 x CPI x IC，只要改进任何一个参数都能提高CPU性能 程序的局部性原理，程序执行时所访问的存储器地址不是随机的，而是相对簇聚。  6 执行时间 = 0.000575(s)
CPI =(45000 + 750000 * 2 + 8000 * 4+ 1500 * 2) / （45000 + 75000 + 8000 + 1500）~= 1.</description>
    </item>
    
  </channel>
</rss>