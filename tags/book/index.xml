<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on Minimal</title>
    <link>https://yjhmelody.github.io/tags/book/</link>
    <description>Recent content in Book on Minimal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Mar 2019 13:57:37 +0000</lastBuildDate>
    
	<atom:link href="https://yjhmelody.github.io/tags/book/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>实现Lua-AST</title>
      <link>https://yjhmelody.github.io/blog/posts/implement-lua-ast/</link>
      <pubDate>Sun, 24 Mar 2019 13:57:37 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/implement-lua-ast/</guid>
      <description>实现Lua解释器-AST 调研 最近终于开始做毕设了，于是开始考虑是否用一款语法分析生成器来写Lua前端，遂发现Pest, 一款Rust的语法分析器，使用PEG文法。这个文法有点像BNF和正则的融合，但是定义无歧义，表达能力小于等于CFG。写起来比较舒服，考虑到Lua官方文法整理出来有许多左递归文法，改写很麻烦（我不太会），虽然Pest本身编写很友好，但是感觉文档描述有点少，有些关键的地方使用不清楚，加上没有IDE的代码提示，遂放弃（不过写一些小语言的简单文法以后可以考虑）。之前用过Nom这款解析组合子库，这个库性能非常好，但是我觉得语法设计的非常怪异，之前用也没搞清楚，对于之前编写的某个玩具虚拟机的字节码编译器使用起来也是小题大做，反而搞复杂了。
于是乎，还是打算手写。考虑到Lua本身文法少，手写代码量不会多上几百行；自己之前也没有实现一个比较满意的解析器；如果用语法生成生成器，首先还得学，然后得花时间改写文法，有点得不偿失。
词法 首先随便写了点词法这块，发现我抽象能力太弱了，本来想多用第三方库实现更抽象性能更好的词法分析类，但我有点不太熟悉泛型编程，而且前期具体工作不明确，写了很大概率后面要改。于是乎，就是很粗糙地使用了String类型。而对于具体的词法分析，感觉写过很多次，每次套路都写的不一样，参考别人的实现，也都是五花八门，我也没法判断哪种够优雅。而对于Lua语言，毕竟是工业级语言，词法分析实现细节一定要参考书或官方文档，语法细节非常多。
先从AST开始 果然了解一门语言除了常见的语法特性见识了以外，看文法和AST感觉也不错。不过我个人对文法不太感兴趣，也不太擅长，而AST可以看清楚这个语言的很多语义。 下面整理一下Lua的AST，可能设计的一般般，以后肯定还需要改动。下面我只列出AST，而不写出文法。
#[derive(Debug)] pub struct Block { last_line: Line, stats: Vec&amp;lt;Stat&amp;gt;, ret_exps: Vec&amp;lt;Exp&amp;gt;, }  Block，或 Chunk，是Lua最小编译单位。Lua解释器通过传递Block给编译器，生成字节码后解释执行。Block必须包含语句和返回值，当然返回值可以有多个，而且可以是表达式，这个很自然。
接下来的 Stat有点长，它表示Lua的语句(statment)。语句包括了表达式(expression)的结构，这跟许多静态语言不一样所以会比较长，但这也是它的主体了。 仔细一看，Stat也只有几个流程控制，赋值（包括变量定义），函数定义，无他。写过一点lua就知道，lua没有哪些地方的代码需要提升(lift)，都是在解释时进入到环境的。
#[derive(Debug)] pub enum Stat { Empty, Break { line: Line, }, Label { name: String, }, Goto { name: String, }, Do { block: Box&amp;lt;Block&amp;gt;, }, While { exp: Exp, block: Box&amp;lt;Block&amp;gt;, }, Repeat { exp: Exp, block: Box&amp;lt;Block&amp;gt;, }, If { exps: Vec&amp;lt;Exp&amp;gt;, blocks: Vec&amp;lt;Block&amp;gt;, }, ForNum { line_of_for: Line, line_of_do: Line, var_name: String, exps: (Exp, Exp, Exp), block: Box&amp;lt;Block&amp;gt;, }, ForIn { line_of_do: Line, name_list: Vec&amp;lt;String&amp;gt;, exp_list: Vec&amp;lt;Exp&amp;gt;, block: Box&amp;lt;Block&amp;gt;, }, LocalVarDecl { last_line: Line, name_list: Vec&amp;lt;String&amp;gt;, exp_list: Vec&amp;lt;Exp&amp;gt;, }, Assign { last_line: Line, var_list: Vec&amp;lt;Exp&amp;gt;, exp_list: Vec&amp;lt;Exp&amp;gt;, }, LocalFnDef { name: String, exp: Box&amp;lt;Exp&amp;gt;, }, }  写到这里，说实话好像讲AST没什么意思，于是下面这个也没什么好总结了。不过要注意好一些值的限定，虽然有些地方使用了Exp，但是其实里面用的枚举值是固定的， 其实可以提出来单独定义。我为了整体的简洁性，就没这样做。在后面的实现中，应该对性能和代码量有一定影响，不过到时候改也不迟。 这里有个不好的地方就是Line几乎都用到了，为什么不封装一下呢？主要是还是为了简单而多了样板代码，到后期写的时候不会因为类型过多而处理麻烦。</description>
    </item>
    
    <item>
      <title>《DDIA》概念整理</title>
      <link>https://yjhmelody.github.io/blog/posts/ddia%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86/</link>
      <pubDate>Thu, 30 Aug 2018 20:00:00 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/ddia%E6%A6%82%E5%BF%B5%E6%95%B4%E7%90%86/</guid>
      <description>最近指忙里抽闲的看《Designing Data-Intensive Applications》（《设计数据密集型应用》）这本书，主要书看中文为主。这本书非常好，我现在刚看完一半。这本书让你认识到了数据库系统和分布式系统的大概貌，没有深入繁琐的具体细节也没有让人浅尝辄止。这本书网络上评价很高，甚至豆瓣评分有2个评分，一个是9.5分，一个是10分。现在即使想作为一个普通的后端工程师也需要学习分布式知识了，强烈推荐这本书。
我发现书后面的术语表非常精良，个人认为：虽然可能还涵盖不到一半的核心概念，但是如果能深刻的理解这术语表部分的，那对数据库系统和分布式系统就有了比较好的整体认识了。
顺便，光看这本书就需要接触过数据结构，操作系统，计算机网络，数据库原理，还有少部分组成原理的知识，不然只能知其然不知其所以然。限于自己的个人水平和这方面不多的实践，有些部分还没有理解到位。个人认为，学习分布式可能还需要学习一点并行编程和网络编程，分布式系统可能是综合性比较强的方向了。并且根据具体要做的分布式系统，可能还需要机器学习，搜索引擎等知识。
这本书配合着学习 MIT6.824 可能会非常好吧。
以下整理出了英文和中文的术语表。
英文 asynchronous Not waiting for something to complete (e.g., sending data over the network to another node), and not making any assumptions about how long it is going to take. See Synchronous Versus Asynchronous Replication on page 153, Synchronous Versus Asynchronous Networks on page 284, and System Model and Reality on page 306.
atomic  In the context of concurrent operations:describing an operation that appears to take effect at a single point in time, so another concurrent process can never encounter the operation in a halffinished state.</description>
    </item>
    
    <item>
      <title>我的五月反思</title>
      <link>https://yjhmelody.github.io/blog/posts/2018%E5%B9%B45%E6%9C%88%E5%8F%8D%E6%80%9D/</link>
      <pubDate>Sun, 06 May 2018 22:48:58 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/2018%E5%B9%B45%E6%9C%88%E5%8F%8D%E6%80%9D/</guid>
      <description>懒惰的自己与混沌的事情 首先恭喜自己美赛拿了M奖。然后接下来的话都是对这一个多月的反思。
读书 之前提到的要看的几本书。 - 《C++性能优化指南》随便看了几章后就还回去了，暂时用不到，可能需要工作2，3年才能有较深刻的体会，不然现在看都是一些大道理罢了，虽然知道这么做非常多，但是因为没有这些编码经验导致印象非常模糊，无法自发地去利用这些知识。 - 《Effective Modern C++》这本书一直在看，已经看了半本左右吧。我读的是英文版，而且是乱序读的，对哪个 Item 感兴趣就读哪个。这本书基本是对 C++11 C++14 的新特性总结与避坑。这些新特性有一半我已经接触过了，所以有些 Item 看起来还好，只需要注意几个细节。而有些特性平时使用不到，理解不够深刻，读起来也是懵懂的。 - 《深入理解JVM》这本书是几乎全部快速扫过一遍了。可惜啊，现在很多记不清了，只有一些感性的认知记忆了。毕竟许多知识就是需要多遍的理解并且实践才能获得真正的深刻。 - 《Scala函数式编程》，这本难度还是超出了我的预期。它把太多的内容交给了读者自己去编写，而且我觉得它里面的部分内容组织的有一定问题，后面也全然不提 Scala 的那些语法，以至于得自己先去了解那些语法。目前为止我粗略读了半本，但是习题才写到第五章。 - 《算法新解》，惭愧。后来就几乎没有看了，它偏重于函数式，所以可以说跟本科要求的数据结构已经不怎么搭了。而且这本书大多数内容引用了一个博士论文——专门研究函数式数据结构的论文，可见这本书其实没有作者所说的非常基础。
除了以上几本计划内的书，其实还有好多本计划外的书，比如《七周七语言》，非常好的书，不过难度也是比较大的，我主要是把它当做扩展自己的视野的科普书来看的。之前的 Lua 那篇博客就是整理自该书，遗憾的是后面的那些内容太庞杂了，没有精力继续整理。还有个比较重要的是 《Programming in Scala, Third Edition : A comprehensive step-by-step guide》，这是 Scala 之父的作品。我直接读英文版，已经接近半本了。实话说，我觉得我还是没怎么掌握——我真的编码太少了。这本书真的挺厚的，堪比《C++ Primer》，Scala 本身复杂度也是不亚于 C++ 的。
其实对一些书的总结挺没有意思的，并不能真正看出自己学到多少。而且想看的书一直在增多和变化着，感觉变得越来越乏力。
复习 前几天终于开始复习高数了，不过非常不顺利，甚至没有找到学习高数的感觉。讲义内的一些题目非常灵活、综合，连选择题的解析也把各个选项当证明题来做。这时候，基础的知识和定义需要理解的清楚而深刻。不幸，我一直不擅长记忆，一连串的定义要精确的记忆理解压垮了我的脑袋。于是，在图书馆按捺不住，没隔多久就打道回府了。
我发现了我缺少了克服一些客观问题和主观问题的意志力，也缺少把计划铭记于心然后执行的习惯。我计划稍后在纸上写下学习计划表，精确到小时，并且随身携带着。有些坏习惯或好习惯必须得靠主观意志来去去除或者养成。
方向 就在刚才，我查了许多关于 PLT 的资料，几乎全是英文的，而且许多大量的前置知识。PLT 是指 Programming Language Thesis，这个国内真的很少。全是非常好的学校才有那么一点点人搞这个方向。基本是偏数学（较强的数理逻辑知识是基础）的方向了，这样看来，我现在几乎是*零基础*（大概学习了一些函数式编程是我在这方向的唯一的基础了），而国内顶尖高校高年级是有开相关的课程的。其实我也间歇性地搜集过 PLT 相关的资料，涉及面太庞大了，PLT 其实本身非常庞大，纳闷的是为什么国内搞这个方向的人这么少。知乎可能是我目前唯一能搜到许多理想的 PLT 相关资料的地方了。入门可能是最麻烦的了，看那些搞 PLT 人在知乎的答案，总是一头雾水。
我想我很可能就是要往这方向发展了（抛开目前的水平不谈，我个人意向就是想学习跟编程语言本身强相关的方向），所以才打算考研，搞这个方向的学校也真是屈指可数。
以我目前的情况嘛，大概主要时间放在考研复习上了，平时偶尔看看基础的 PLT 知识，主要是深入学习 Haskell 吧， Haskell 深入了，大概许多 PLT 的方向也能慢慢摸索出来了。</description>
    </item>
    
    <item>
      <title>七周七语言2-Lua</title>
      <link>https://yjhmelody.github.io/blog/posts/%E4%B8%83%E5%91%A8%E4%B8%83%E8%AF%AD%E8%A8%802-lua/</link>
      <pubDate>Fri, 20 Apr 2018 21:37:57 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/%E4%B8%83%E5%91%A8%E4%B8%83%E8%AF%AD%E8%A8%802-lua/</guid>
      <description>Lua Lua一览 Lua 是一门基于 table 的编程语言，它的核心抽象层简单而强大，你可以用它实现过程式、面向对象、事件驱动等。 Lua 的 table 很适合基于原型的面向对象编程。这种编程风格中，类和实例不是割裂的概念。你先创建一个实例，这个实例看起来像你需要的对象。然后你再把这个实例复制多份，对每一份做一些定制化。
初窥 Lua 的语法友好，并且易于接近，无须担心分号或者空格写哪里。空格对 Lua 来说不太重要，两个语句之间甚至不需要换行。Lua 使用 &amp;ndash; 来注释。
以下示例主要在REPL中运行。
&amp;gt; print &amp;quot;hello world&amp;quot; hello world &amp;gt; print &amp;quot;hello world&amp;quot; &amp;gt; print &amp;quot;hello world&amp;quot; print &amp;quot;hello world&amp;quot;  Lua 基础 Lua 是动态类型的，也就是说代码中的变量不需要声明类型，在运行时才会决定其具体类型。Lua 的基础类型有： - 数字 - 布尔值 - 字符串
&amp;gt; 3.14 3.14 &amp;gt; true true &amp;gt; &amp;quot;hello world&amp;quot; hello world &amp;gt;  Lua 没有整数，就跟 JS 一样。字符串也可以使用单引号，也使用反斜杠转义特殊字符或不可见字符。
字符串可以用 .. 来拼接，用 # 来获取长度。</description>
    </item>
    
    <item>
      <title>2018学习和复习</title>
      <link>https://yjhmelody.github.io/blog/posts/2018%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Tue, 20 Mar 2018 19:21:06 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/2018%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%A4%8D%E4%B9%A0/</guid>
      <description>2018学习和复习 大学做过无数次计划，似乎少有完全达成，这样看来，其实是自己的问题。所以特此再做一次计划，计划不会特别具体，但要让自己严格执行。
学习 把学习和复习分开来计划其实是很明智的。复习计划是与考研强相关的，学习计划则是与专业强相关，与考研弱相关的。当然介于考研其实是场持久战，而且如果要考408的话，复习时间其实是很紧的，所以复习期间看考研不相关的东西其实是不太明智的，除非能提早开始准备。 当然，我这个人就这样，不喜欢总是做一些课内的或者合时宜的事情，偶尔会在课外捣鼓一些其他东西。这次准备看一些感兴趣的又能对考研的复习有一定作用的书籍。 首先是最近已经在看了的，《Scala函数式编程》。因为课内可能需要捣鼓大数据，分布式什么的，这本书可以学习到一些Scala编程，其实有一定帮助。但对考研帮助不大，可能里面涉及到的少部分函数式数据结构，是对复习数据结构有帮助，但是其实应该不明显的。这本书习题蛮多的，后面还特别吃力。所以最近可能会缓一缓，基本上一个月看一章足矣。记得寒假看了点《JS函数式编程》和《Haskell趣学指南》，其实已经学到了不少函数式知识了。Scala这本也基本没超出之前所看的，唯一区别的是这本难度更大，而且有大量习题。 第二本是《算法新解》，这本也开始看了，不过没有前者看深刻。这本除了图数据结构以外，基本囊括了数据结构这门课的知识点并且还有许多高级数据结构，除此之外还增加了近一半函数式数据结构和算法。这本应该不会全看完，视情况而定。前期数据结构复习以此为准，毕竟要对自己更高要求嘛。 未来几个月打算看的书有《深入理解JVM》，《Effective Modern C++》，《C++性能优化指南》。这几本书只打算在这个学期和暑假的时候看下，3本通读半本内容后，就作为参考了。 接下来说说我为什么选这3本。 《深入理解JVM》早就想看了，因为以前厌恶Java的原因导致我也不想了解JVM。许多Java实习生，其实应该看这本书，因为对他们面试和工作都有用处。不过对我而已，这本书其实在讲虚拟机的体系结构罢了，它其实就只是在计算机系统结构上又抽象出了一层体系结构。这样说来，了解过JVM的体系结构以后，其实对计算机体系结构甚至操作系统也有比较大的帮助。考虑到考研可能要考组成原理，而组成原理与系统结构其实知识点很相近，所以说这本书对组成原理复习是有一定帮助的。 《Effective Modern C++》，这本是在大一学C++的时候就想要读了。然而，那时候功底不够，后来大二的时候接触C++比较少了，而且有对C++一些历史原因和特性的无奈与恐惧，还有英文功底不好等原因，没有看。最近开始拿C++刷题了，又扫过几眼C++的书，觉得对STL掌握更好了，最后是因为Rust，导致我挺想看的。 《C++性能优化指南》，这本我其实一点也不了解，单纯看目录，感觉对自己的底层编程有帮助，姑且作为参考吧。
复习 身边人都陆陆续续开始复习了，而我课程其实不少，始终只是在记单词和刷点题。当数学复习开始的时候，大概就是正式进入复习状态吧。网上查说数学复习开始时间是3-6月，而专业课复习开始是6-7月。所以我计划5月一定要开始数学复习，而专业目前只看数据结构并且刷题。专业课7月正式开始。其实这样真的蛮紧张的，所以英语复习是每天都不能松懈的，并且争取这次过6级。 关于复习资料，目前还没收集全，每周会查阅一些信息来补充复习计划。
关于PAT刷题计划： - 3月，前一百题，刷完20分的题。 - 4月，前一百题，刷完25分的题。 - 5月，前一百题，刷完30分的题。 - 暑假，刷完最后的题。
整体上复习大纲就是这样，坚持下来，就会收获。</description>
    </item>
    
    <item>
      <title>2018新年与考研</title>
      <link>https://yjhmelody.github.io/blog/posts/2018%E6%96%B0%E5%B9%B4%E4%B8%8E%E8%80%83%E7%A0%94/</link>
      <pubDate>Wed, 07 Mar 2018 13:57:37 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/2018%E6%96%B0%E5%B9%B4%E4%B8%8E%E8%80%83%E7%A0%94/</guid>
      <description>2018新年与考研 新年 新的2018年到来了，还没用文章对自己过去一年做一个总结。寒假的时候参加美赛，奈何自己太菜，估计只能获得一个参赛奖吧，好像也没什么好说的。
寒假的后半段基本是自学一些感兴趣的东西，比如Haskell、Rust、Scala，主要是学习函数式编程吧，不过其实也就才刚入门的水平而已。除此之外，还在查阅一些考研相关的资料与信息，因为一直以来都有考研的打算，毕竟GPA不理想，没有机会保研嘛。
现状与打算 到了大三下，大部分同学的课表就比较空了，但我可能还是蛮多的，跟大一上的时候差不多吧，不过幸好很多是选修课，不过这些选修课也都挺严格的。而创新实践课老师这个学期给了很多方向，让我们自己选择感兴趣的去学习，只要能真得学到东西就好了。我觉得这样挺不错的，之前的数据可视化我就不太感冒，自己的几何知识真的不太好。虽然现在也是数据可视化相关的，但是细分下来，可以有很多具体的不同方向的知识。比如做数据处理相关的，大数据方向。具体点就是学习分布式处理框架比如hadoop、spark、storm之类。如果硬要说兴趣的话，对这些还是有一点点兴趣的。至于可视化还有一些其他的工作，就交给其他组员做吧。当然我不满足于只是用用这些框架，虽然会应用是很重要，但是我打算学一些分布式系统的知识，这样学习也更深刻。比如CMU和MIT的分布式课，都有公开的，不过好像都是研究生级的课，而且资料不太全，可能很麻烦，这个具体看情况吧。
其实要学的东西还真不少，再加上考研的复习，可能每天都很忙碌。我其实不清楚自己的计划可不可行，但是每天不接触点新知识总是不自在，而复习老知识相对比较枯燥，即使我没有掌握好。
除此之外，在mooc大学平台上，还参加1，2门网络课，跟考研知识比较紧密，但不是为考研而开设的课程，其实也就是CSAPP（我其实基本看完了，课后练习大部分也做了，当然家庭作业都没有做，不过对上个学期操作系统的考试并没有什么帮助。。。）吧，相当于把编译加载，组成原理，操作系统结合的课程，当然不可能讲到那么细，只是学习它们很紧密的地方。这样也能大概巩固操作系统和计组的知识吧。如果我要考浙大的话，就是考408了。需要计网，操作系统，组成原理，数据结构四门核心课的复习。这样能确实有不少的复习作用，而且是从不同角度学习的，因此也有许多新知识，不会枯燥。
数据结构我打算刷PAT，下次考试好像是8月左右，因此时间还蛮充裕的，配套练习有139题，争取全刷了。还有自己准备的一本《算法新解》，比考研难度要高，但是可以作为复习。还有一本《Scala函数式编程》，其实这本跟数据结构和算法关系不大，但是里面少部分还是对数据结构和算法有一定要求和锻炼的。
除了计算机知识，还有英语和数学是这个学期就要开始了，先不考虑政治。数学我打算可能要晚一点再开始，英语现在每天记单词吧，偶尔可能刷刷其他知识点。姑且先这样吧，可能先适应1，2周并且打听打听其他人的学习情况。所以这个月重点在数据结构和英语了吧。
当然还有课内要规划下，重点在分布式系统这块吧。网络编程这门课感觉有点水，打算退了选择云计算，这样也跟创新实践比较紧密些，可以减少负担。 还有一门日语课也是重点，虽然跟考研完全无关，也没有帮助。但是既然自己已经选择了，那就好好学习。这门课一周4节，我估计学完了也就N5的水平了吧，听说N3,N4,N5都没什么用。所以路还长吧，N2好像至少要学2年。如果非要说点希望的话，希望自己本科可以把日语学到N3吧，当然英语更不必说了。
姑且先写到这里吧。</description>
    </item>
    
    <item>
      <title>JS函数式编程笔记2</title>
      <link>https://yjhmelody.github.io/blog/posts/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Wed, 07 Feb 2018 14:27:31 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B02/</guid>
      <description>JS函数式编程 笔记里面常常依赖一些库和之前的代码，而且可能存在理论上的代码和未实现的函数，阅读时，需要仔细。
下面部分经常的东西后面经常用到，我先导入。
const curry = require(&#39;lodash/curry&#39;) const _ = require(&#39;lodash&#39;) const fp = require(&#39;lodash/fp&#39;) const moment = require(&#39;moment&#39;) let compose = function(f, g){ return function(x){ return f(g(x)) } } let toUpperCase = function(str){ return str.toUpperCase() } let toLowerCase = function(str){ return str.toLowerCase() }  Hindley-Milner 类型签名 初识类型 刚接触函数式编程的人很容易深陷类型签名（type signatures）的泥淖。类型（type）是让所有不同背景的人都能高效沟通的元语言。很大程度上，类型签名是以 “Hindley-Milner” 系统写就的。
类型签名在写纯函数时所起的作用非常大，大到英语都不能望其项背。这些签名轻轻诉说着函数最不可告人的秘密。短短一行，就能暴露函数的行为和目的。类型签名还衍生出了 “自由定理（free theorems）” 的概念。因为类型是可以推断的，所以明确的类型签名并不是必要的；不过你完全可以写精确度很高的类型签名，也可以让它们保持通用、抽象。类型签名不但可以用于编译时检测（compile timechecks），还是最好的文档。所以类型签名在函数式编程中扮演着非常重要的角色——重要程度远远超出你的想象。
// capitalize :: String -&amp;gt; String let capitalize = function(s){ return toUpperCase(head(s)) + toLowerCase(tail(s)) } console.</description>
    </item>
    
    <item>
      <title>JS函数式编程笔记1</title>
      <link>https://yjhmelody.github.io/blog/posts/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Mon, 11 Dec 2017 21:47:31 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/js%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B01/</guid>
      <description>JS函数式编程 我们在做什么  “we both know what happens when you assume”，源自一句名言“When you assume you make an ASS of U and ME”，意思是“让两人都难堪”）。但我猜想你在使用可变状态（mutable state）、无限制副作用（unrestricted side effects）和无原则设计（unprincipled design）的过程中已经遇到过一些麻烦。
 现在已经有一些通用的编程原则了，各种缩写词带领我们在编程的黑暗隧道里前行：DRY（不要重复自己，don&amp;rsquo;t repeat yourself），高内聚低耦合（loosecoupling high cohesion），YAGNI （你不会用到它的，ya ain&amp;rsquo;t gonna need it），最小意外原则（Principle of least surprise），单一责任（single responsibility）等等。这些原则同样适用于函数式编程(FP)。
先看基本的例子
let add = function (x, y) { return x + y }; let multiply = function (x, y) { return x * y }; let a = 4; let b = 2; let c = 0; let result = add(multiply(b, add(a, c)), multiply(a, b)); //=&amp;gt;16  你会发现我们不过是在运用古人早已获得的知识</description>
    </item>
    
    <item>
      <title>从《线性代数应该这样学》到《Redis的设计与实现》</title>
      <link>https://yjhmelody.github.io/blog/posts/%E4%BB%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%BA%94%E8%AF%A5%E8%BF%99%E6%A0%B7%E5%AD%A6%E5%88%B0redis%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 08 Sep 2017 21:50:19 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/%E4%BB%8E%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%BA%94%E8%AF%A5%E8%BF%99%E6%A0%B7%E5%AD%A6%E5%88%B0redis%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</guid>
      <description>从《线性代数应该这样学》到《Redis的设计与实现》 《线性代数应该这样学》 起因 这本是好早之前买的，当时想着是时候复习一下线性代数了，因为以后要用到（那时候想到可能需要接触一下机器学习了）。买来之后发现太数学了，怕是数学系的许多人也吃不消看这种书。
收获与总结 这本书可以作为第一本或者第二本线性代数的学习材料。但这本书远比本科工科的要求要高出许多，以致于作者在前言里说，这本每页应当至少投入一小时来学习。匆匆看完前两章我便放下了，书里充斥着大量证明，从最基本的向量空间的定义引出基本的性质，然后用证明的方式来引出各种向量空间的特点跟性质。而这是第一章的内容，读起来还是挺熟悉的感觉的，只是换了一种表述各种概念的方式和术语，但深入思考便与之前学习的向量没有多少差别。这里与我大一学的过程就差别大了，大一是直接从矩阵着手，最后讲到向量，但那时候觉得向量是很突兀的东西，甚至跟高中学习的向量完全不一样，没有从几何的角度稍加解释向量的一些特点。而这本书从标量开始，比较了标量跟向量的异同，开阔了一下从标量到向量的思路，本质上它们比自己想像的还要相似。
第二章接着从有限维度引申到无限维度，在讨论了无限维度的一些异同后，继续深入了向量空间的各种特性，譬如张成空间，直和这些陌生的概念。而这些与普通向量之间的联系是很紧密的，但读到后面愈发抽象，我其实也忘记了七七八八了，惭愧。
后面几章暂时就没有看了，基本应该是从向量空间引申到线性映射，然后引出矩阵及其性质。在我看来矩阵是向量空间的更一般化，所以以后继续讨论的大量性质，也可能用于向量。最后从矩阵的一般运算到各种算子，最后才提出行列式相关内容，大概就是这样（*痛苦*）的过程吧。
《TCP/IP网络编程》 感获 这本书是一本网络编程的入门书，整体难度跟CSAPP的第三部分差不多，各有侧重吧，内容有比较多重叠，但内容稍微多于CSAPP。用的是C语言的socket接口来讲解基本原理。用C语言讲有个好处，就是能直接从操作系统级别来思考网络编程，而且能使用全部的socket模式、所有并发模型、IO模型。 缺点是这些socket api相当底层，以至于一个api只做一个最基本的逻辑操作。学习起来特别费劲，而且高度依赖一部分操作系统的知识。 因为之前接触过golang和nodejs，分别也简单用过相应的socket接口。这两个语言的并发模型比较受限，nodejs目前只能异步跟简单多进程（将来应该可以用上简单多线程），golang倒是用goroutine（线程调度），通道（或者叫信道），多进程。而它们的socket接口便是跟这些模型有一定的耦合，而且高度精简，有更好的语义，从底层上面减去一些麻烦。当然，nodejs因为更单一，比golang还精简。
言归正传，这本书其实重点不在于讲解socket api，而是从使用api来达到理解socket编程思维，socket的各种核心功能，tcp/udp基本原理，并发模型的基本原理，可能还有较多的跨平台编程思路（因为C语言的socket各个系统有差异）。
一点思考 因为听说是隔壁网络工程的网络编程课的教材（说实话，这本书可能稍微浅了点，除非隔壁把这本书全部内容都讲授，我觉得才比较合理），我也无意中看到并且有打算看看。不过这本书实际比较狭窄，基本专注于tcp和并发这两个内容了，虽然充分且不错地解释了部分tcp知识，部分操作系统知识，对应用层太忽略了（提了下dns跟http），我个人认为把传输层跟应用层稍加紧密地联系起来，更能激发学习兴趣，也使这本书更加实用。
其实大概就匆匆看了半本，而且忽略了windows下的实现，自己也就琢磨了下源码，基本没有自己去写过（坏习惯啊），算是预热计算机网络跟操作系统的知识了。
《Redis的设计与实现》 这是图书馆借的到好书，其实早想看了，之前拿起来抱怨看不懂，这次再拿起来，已经不是那么可怕了。
收获 不过现在我看的比较少，数据结构篇还没有看完，也算是温习一些数据结构的知识了。这本书把redis相关的数据结构的内存模型很漂亮的表述清楚了，特别是hash和跳表，结合了许多图片来理解。也讲清楚了实现该数据结构的动机，复杂度，和一些特性。但大部分的数据结构基础操作忽略了，有些地方比较好奇，却没有讲到。这是我目前读到第六章的感受。但快开学了，这些书不太可能全看完，接下来怎么看还是得看心情咯。
最近的读书总结 其实还看了不少书，比如《深度学习》、《机器学习》、《统计学习方法》、《流畅的python》等，这些应该是一两个月前开始看的，都是需要长期学习的知识，在暑假机器学习集训班学习时来补充机器学习相关知识的。之后会写机器学习相关的总结，所以没有在这里总结一些知识跟感想。 还有部分书是跟下学期的课比较紧密的，提前看看也算是预习，本身也挺感兴趣的，也不一一列出了，读的篇幅不多，列出意义也不大。</description>
    </item>
    
    <item>
      <title>最近一周总结</title>
      <link>https://yjhmelody.github.io/blog/posts/%E6%9C%80%E8%BF%91%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 20 Aug 2017 20:57:17 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/%E6%9C%80%E8%BF%91%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/</guid>
      <description>总结 近况 杂项 发现已经漏了好几天没有写博客，也不知道自己能否坚持下去，最近可能也比较懈怠。C++的模版接触了下，发现使用还是容易掌握的，但后来就没有学下去了。靠这样学是永远学不完的，甚至学了一部分忘记七七八八了。打算下学期如果适合C++编程的任务，尽量使用C++来完成，这样有任务的使用C++应该能学的更快，更扎实，C++学好了，很多东西也都能学好，果然不是空穴来风。
兴趣方向 最近学习深度学习的基础，主要是全连接神经网络(FNN)和卷积神经网络(CNN)，其实正式学习是下周，所以这周在机器学习方面懈怠很多。其他方面呢，编译原理，《编译器设计》看了些内容，感觉很有收获，虽然不是直接关于编译原理的收获，但对计算机的全貌有了更进一步的了解。期间，查了一些关于链接的知识，也看了一点点关于linux kernel的知识，总的来说，收获了一点点学习这些知识的方法论。
英文资料 这两天买了两本英文书，打算常常读一读，一本是go圣经，一本是《编译原理与实践》。两本对于我来说应该难度不大。go圣经我看过半本中文版，虽然还掌握的不好，但有了前置知识，看英文只是时间问题。《编译原理与实践》比《龙书》跟《编译器设计》要简单些，所以买了英文版，打算下学期的编译原理课配合着读。这么说来了，在编译原理相关的书里，我已经接触了6，7本了，但其实没有精读过任何一本。下学期重点看这三本吧，以我现在半吊子的水平，希望本科基本能看完3，4本。毕竟最想从事的就是编译器相关工作，也说不清为什么偏爱这个。
不足与改正 最近越来越意识到自己在编程方面的缺陷，不论编写代码量小还是较大，自己思路一直不清晰。说来，很多我编写的代码，是根据别人的来编写的，自己完全独立从头开始写的几乎没有。上大学以后，在学业方面的作业情况也有类似，就是没有自己的思路，得照着例题来“复现”思路，但这终归不是自己学到的知识。这个问题从大学开始的，已经遗留比较久了，严重影响了自己的思维。趁着下学期的许多有趣课程跟高难度的高强度的课表，改着这个坏毛病，尽量做到把书本知识深刻映入大脑，然后根据自己的思路来完成作业而不依赖参考答案。</description>
    </item>
    
    <item>
      <title>《Web API的设计与开发》读书笔记</title>
      <link>https://yjhmelody.github.io/blog/posts/web-api%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 08 Aug 2017 12:11:10 +0000</pubDate>
      
      <guid>https://yjhmelody.github.io/blog/posts/web-api%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description> 第1章 什么是 Web API Web API 的重要性 一些在线服务能够对那些公开的API进行会话控制、访问控制、服务分析，提供面向用户的仪表盘，以及发布文档等，承接了各种各样的工作。
通过对外公开 Web API，同外部其他服务的集成变得更加便捷，并从中衍生出了新的价值，使在线服务以及业务不断发展，逐步形成了“API经济学”的景象，并在这几年受到相当大的关注。
各种各样的 API 模式  将已发布的 Web 在线服务的数据或功能通过 API 公开 将附加在其他网页上的微件公开 构建现代 Web 应用 开发智能手机应用 公司内部多个系统的集成  应该通过 API 公开什么  最简洁的答案是将你的在线服务所能做的事情全部通过API公开 不存在彻底屏蔽搜集信息的行为，所以无需担心盗用，公开 API并不意味着毫无限制的访问 公开 API 将原来的服务组合成新的应用来为用户提供服务的“间接销售”模式  设计优美 API 的重要性  易于使用 便于更改 健壮性好 不怕公之于众  如何美化 Web API 两个重要原则：
 设计规范明确的内容必须遵守相关规范 没有设计规范的内容必须遵守相关事实标准  REST 与 Web API REST 依次一般指下面两种意思：
 符合 Fielding 的 REST 架构风格的Web服务系统 符合 RPC风格的 XML (或JSON) + HTTP 接口的系统(不使用SOAP)  小结  如果尚未公开 Web AP，则应立即考虑公开 设计优美的 Web API 不用过分拘泥于 REST 一词  </description>
    </item>
    
  </channel>
</rss>